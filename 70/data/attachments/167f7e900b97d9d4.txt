# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Pages with errors >> Visual effect for checkout
- Location: /home/runner/work/sauce-demo-let-s-test-it/sauce-demo-let-s-test-it/src/tests/ui/ui.spec.ts:37:7

# Error details

```
Error: expect(page).toHaveScreenshot(expected)

  could not decode image as PNG.

Expected: /home/runner/work/sauce-demo-let-s-test-it/sauce-demo-let-s-test-it/src/assets/images/ui/checkout.png

Call log:
  - expect.toHaveScreenshot(checkout.png) with timeout 5000ms
    - verifying given screenshot expectation
  - taking page screenshot
    - disabled all CSS animations
  - waiting for fonts to load...
  - fonts loaded
  - could not decode image as PNG.

    at CheckoutPage.expectHaveScreenshot (/home/runner/work/sauce-demo-let-s-test-it/sauce-demo-let-s-test-it/src/pages/e2e/base.page.ts:75:29)
    at /home/runner/work/sauce-demo-let-s-test-it/sauce-demo-let-s-test-it/src/tests/ui/ui.spec.ts:49:20
```

# Test source

```ts
   1 | import { HeaderComponent } from '@_src/components/header.component';
   2 | import { SideBarComponent } from '@_src/components/sidebar.component';
   3 | import { ScreenshotPath } from '@_src/utils/paths.util';
   4 | import { type Locator, type Page, expect } from '@playwright/test';
   5 |
   6 | export class BasePage {
   7 |   protected readonly page: Page;
   8 |   private readonly rootLocator: Locator;
   9 |   readonly header: HeaderComponent;
  10 |   readonly sidebar: SideBarComponent;
  11 |
  12 |   readonly headerTitle: Locator;
  13 |   readonly error: Locator;
  14 |
  15 |   constructor(page: Page) {
  16 |     this.page = page;
  17 |     this.rootLocator = page.locator('#root');
  18 |     this.header = new HeaderComponent(this.page);
  19 |     this.sidebar = new SideBarComponent(this.page);
  20 |
  21 |     this.headerTitle = page.getByTestId('title');
  22 |     this.error = page.getByTestId('error');
  23 |   }
  24 |
  25 |   async goTo(url: string = '/'): Promise<void> {
  26 |     await this.page.goto(url);
  27 |   }
  28 |
  29 |   async toHaveUrl(url: string | RegExp): Promise<void> {
  30 |     await expect(this.page).toHaveURL(url);
  31 |   }
  32 |
  33 |   async catchError(error: string): Promise<void> {
  34 |     await expect(this.error).toContainText(error);
  35 |   }
  36 |
  37 |   //* Sidebar
  38 |   async resetApp(): Promise<void> {
  39 |     await this.header.clickSideBarMenu();
  40 |     await this.sidebar.clickLinkResetAppState();
  41 |     await this.sidebar.clickButtonCrossMenu();
  42 |   }
  43 |
  44 |   async logoutFromApp(): Promise<void> {
  45 |     await this.header.clickSideBarMenu();
  46 |     await this.sidebar.clickLinkLogout();
  47 |   }
  48 |
  49 |   async closePage(): Promise<void> {
  50 |     await this.page.close();
  51 |   }
  52 |
  53 |   //* Scrolls
  54 |   async scrollDown(): Promise<void> {
  55 |     await this.page.evaluate(() => {
  56 |       window.scrollTo(0, document.body.scrollHeight);
  57 |     });
  58 |   }
  59 |
  60 |   async scrollUp(): Promise<void> {
  61 |     await this.page.evaluate(() => {
  62 |       window.scrollTo(0, 0);
  63 |     });
  64 |   }
  65 |
  66 |   //* Screenshot
  67 |   async takeScreenshot(screenshot: string): Promise<void> {
  68 |     await this.page.screenshot({
  69 |       path: `${ScreenshotPath}${screenshot}.png`,
  70 |       fullPage: true,
  71 |     });
  72 |   }
  73 |
  74 |   async expectHaveScreenshot(screenshot: string): Promise<void> {
> 75 |     await expect(this.page).toHaveScreenshot(`${screenshot}.png`, { fullPage: true });
     |                             ^ Error: expect(page).toHaveScreenshot(expected)
  76 |   }
  77 |
  78 |   //* ARIA
  79 |   async toMatchAriaSnapshot(aria: string): Promise<void> {
  80 |     await expect(this.rootLocator).toMatchAriaSnapshot({ name: `${aria}.aria.yml` });
  81 |   }
  82 | }
  83 |
```

# Local changes

```diff
diff --git a/.gitignore b/.gitignore
index b9d18d3..35c8eb7 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,12 +1,18 @@
+# Node
+/node_modules/
+
+# Playwright
 /allure-report/
 /allure-results/
 /blob-report/
-/node_modules/
 /test-results/
 /test-report/
-/src/output/**
-/playwright-report/  
+/playwright-report/
 /playwright-results/  
 /playwright/.cache/
-/.env
-/.auth
\ No newline at end of file
+/src/output/**
+
+# .env files and .auth folder
+/.auth
+.env.*
+!.env.template
diff --git a/README.md b/README.md
index 5ffbb30..d39f603 100644
--- a/README.md
+++ b/README.md
@@ -1,30 +1,85 @@
-# Sauce Demo let's test it!
+# Sauce Demo - Let's Test It!
 
-[E2E] Automation tests for Sauce Labs shop - ðŸŽ­Playwright.
+[E2E] Automation tests for Sauce Labs shop using ðŸŽ­ **Playwright** framework.
+Tests are written using **TypeScript** language and Page Object Structure (POM) design pattern.
 
-### Installation and setup
+## Table of Contents
 
-- install dependencies: `npm install`
-- setup ðŸŽ­ Playwright framework `npx playwright install`
-- setup husky `npx husky`
-- (optional) install Visual Studio Code extensions
+1. [Project Overview](#project-overview)
+2. [Installation and Setup](#installation-and-setup)
+3. [Folder Structure](#folder-structure)
+4. [How to Run Tests](#how-to-run-tests)
+5. [Contributing](#contributing)
+6. [License](#license)
 
-### How to run tests
+## Project Overview
 
-- run all tests:
+This repository contains end-to-end (E2E) automation tests for the Sauce Labs shop. The tests are built using the Playwright framework, ensuring robust and reliable testing for web applications.
 
-```
+## Installation and Setup
+
+1. Clone the repository:
+   ```bash
+   git clone <repository-url>
+   cd sauce-demo-let-s-test-it
+   ```
+2. Install dependencies:
+   ```bash
+   npm install
+   ```
+3. Set up Playwright:
+   ```bash
+   npx playwright install
+   ```
+4. Set up Husky for Git hooks:
+   ```bash
+   npx husky install
+   ```
+5. (Optional) Install recommended Visual Studio Code extensions.
+
+## Folder Structure
+
+A brief overview of the folder structure:
+
+- `src/`: Contains source files, including components, helpers, models, and utilities.
+  - `tests/`: Organized test cases for accessibility, API, E2E, performance, and UI.
+  - `output/`: Stores test reports, logs, and results.
+  - `config/`: Configuration files for the project.
+  - `fixtures/`: Test data and setup files.
+
+## Code Language and Framework
+
+This project is written in **TypeScript**, a strongly typed superset of JavaScript, which provides better tooling and type safety for large-scale projects. The testing framework used is **Playwright**, which is known for its fast and reliable end-to-end testing capabilities.
+
+## Design Pattern: Page Object Model (POM)
+
+The project follows the **Page Object Model (POM)** design pattern to enhance test maintainability and readability. Each page or component of the application is represented as a class, encapsulating its elements and actions. This approach ensures:
+
+- Reusability of code.
+- Easier maintenance when UI changes occur.
+- Improved readability and organization of test scripts.
+
+The `pages/` and `components/` directories contain the implementation of the POM structure, while the `tests/` directory contains the test cases that interact with these page objects.
+
+## How to Run Tests
+
+Run all tests:
+
+```bash
 npx playwright test
 ```
 
-For more usage cases look in `package.json` scripts section.
+For additional test commands, refer to the `scripts` section in `package.json`.
 
-### Update package with audit and additional update of web browsers
+## Contributing
 
-```
-npm update --save
-npm update --save-dev
-npm audit
-npm audit fix
-npx playwright install
-```
+Contributions are welcome! Please follow these steps:
+
+1. Fork the repository.
+2. Create a new branch for your feature or bug fix.
+3. Commit your changes with clear messages.
+4. Submit a pull request.
+
+## License
+
+This project is licensed under the [MIT License](LICENSE).
```
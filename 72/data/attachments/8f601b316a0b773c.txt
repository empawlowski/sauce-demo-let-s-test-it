# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Pages with errors >> Visual effect for cart
- Location: /home/runner/work/sauce-demo-let-s-test-it/sauce-demo-let-s-test-it/src/tests/ui/ui.spec.ts:23:7

# Error details

```
Error: expect(page).toHaveScreenshot(expected)

  could not decode image as PNG.

Expected: /home/runner/work/sauce-demo-let-s-test-it/sauce-demo-let-s-test-it/src/assets/images/ui/cart.png

Call log:
  - expect.toHaveScreenshot(cart.png) with timeout 5000ms
    - verifying given screenshot expectation
  - taking page screenshot
    - disabled all CSS animations
  - waiting for fonts to load...
  - fonts loaded
  - could not decode image as PNG.

    at BasePage.expectHaveScreenshot (/home/runner/work/sauce-demo-let-s-test-it/sauce-demo-let-s-test-it/src/pages/e2e/base.page.ts:75:29)
    at /home/runner/work/sauce-demo-let-s-test-it/sauce-demo-let-s-test-it/src/tests/ui/ui.spec.ts:34:16
```

# Test source

```ts
   1 | import { HeaderComponent } from '@_src/components/header.component';
   2 | import { SideBarComponent } from '@_src/components/sidebar.component';
   3 | import { ScreenshotPath } from '@_src/utils/paths.util';
   4 | import { type Locator, type Page, expect } from '@playwright/test';
   5 |
   6 | export class BasePage {
   7 |   protected readonly page: Page;
   8 |   private readonly rootLocator: Locator;
   9 |   readonly header: HeaderComponent;
  10 |   readonly sidebar: SideBarComponent;
  11 |
  12 |   readonly headerTitle: Locator;
  13 |   readonly error: Locator;
  14 |
  15 |   constructor(page: Page) {
  16 |     this.page = page;
  17 |     this.rootLocator = page.locator('#root');
  18 |     this.header = new HeaderComponent(this.page);
  19 |     this.sidebar = new SideBarComponent(this.page);
  20 |
  21 |     this.headerTitle = page.getByTestId('title');
  22 |     this.error = page.getByTestId('error');
  23 |   }
  24 |
  25 |   async goTo(url: string = '/'): Promise<void> {
  26 |     await this.page.goto(url);
  27 |   }
  28 |
  29 |   async toHaveUrl(url: string | RegExp): Promise<void> {
  30 |     await expect(this.page).toHaveURL(url);
  31 |   }
  32 |
  33 |   async catchError(error: string): Promise<void> {
  34 |     await expect(this.error).toContainText(error);
  35 |   }
  36 |
  37 |   //* Sidebar
  38 |   async resetApp(): Promise<void> {
  39 |     await this.header.clickSideBarMenu();
  40 |     await this.sidebar.clickLinkResetAppState();
  41 |     await this.sidebar.clickButtonCrossMenu();
  42 |   }
  43 |
  44 |   async logoutFromApp(): Promise<void> {
  45 |     await this.header.clickSideBarMenu();
  46 |     await this.sidebar.clickLinkLogout();
  47 |   }
  48 |
  49 |   async closePage(): Promise<void> {
  50 |     await this.page.close();
  51 |   }
  52 |
  53 |   //* Scrolls
  54 |   async scrollDown(): Promise<void> {
  55 |     await this.page.evaluate(() => {
  56 |       window.scrollTo(0, document.body.scrollHeight);
  57 |     });
  58 |   }
  59 |
  60 |   async scrollUp(): Promise<void> {
  61 |     await this.page.evaluate(() => {
  62 |       window.scrollTo(0, 0);
  63 |     });
  64 |   }
  65 |
  66 |   //* Screenshot
  67 |   async takeScreenshot(screenshot: string): Promise<void> {
  68 |     await this.page.screenshot({
  69 |       path: `${ScreenshotPath}${screenshot}.png`,
  70 |       fullPage: true,
  71 |     });
  72 |   }
  73 |
  74 |   async expectHaveScreenshot(screenshot: string): Promise<void> {
> 75 |     await expect(this.page).toHaveScreenshot(`${screenshot}.png`, { fullPage: true });
     |                             ^ Error: expect(page).toHaveScreenshot(expected)
  76 |   }
  77 |
  78 |   //* ARIA
  79 |   async toMatchAriaSnapshot(aria: string): Promise<void> {
  80 |     await expect(this.rootLocator).toMatchAriaSnapshot({ name: `${aria}.aria.yml` });
  81 |   }
  82 | }
  83 |
```

# Local changes

```diff
diff --git a/.env.local b/.env.local
new file mode 100644
index 0000000..9fe8552
--- /dev/null
+++ b/.env.local
@@ -0,0 +1,8 @@
+BASE_URL='http://localhost:8080'
+USER_STANDARD='standard_user'
+USER_LOCKED='locked_out_user'
+USER_PROBLEM='problem_user'
+USER_PERFORMANCE='performance_glitch_user'
+USER_ERROR='error_user'
+USER_VISUAL='visual_user'
+USER_PASSWORD='secret_sauce'
\ No newline at end of file
diff --git a/.env b/.env.prod
similarity index 100%
rename from .env
rename to .env.prod
diff --git a/package.json b/package.json
index 7b5f218..32dbb4a 100644
--- a/package.json
+++ b/package.json
@@ -9,6 +9,7 @@
     "lint": "npx eslint . --max-warnings 0",
     "tsc:check": "npx tsc --noEmit --pretty --strict",
     "prepare": "husky || true",
+    "test:env:prod": "set ENV=prod && npx playwright test",
     "test": "npx playwright test",
     "test:ui": "npm run test -- --ui",
     "test:failed": "npm run test -- --last-failed",
diff --git a/playwright.config.ts b/playwright.config.ts
index c7c7a17..00fe5ef 100644
--- a/playwright.config.ts
+++ b/playwright.config.ts
@@ -1,15 +1,8 @@
 import { Configuration } from './src/config/configuration';
 import { defineConfig, devices } from '@playwright/test';
-import * as dotenv from 'dotenv';
 import * as os from 'os';
-import * as path from 'path';
 
-dotenv.config();
-dotenv.config({ path: path.resolve(__dirname, `.env`) });
-
-/**
- * See https://playwright.dev/docs/test-configuration.
- */
+/** Based on: https://playwright.dev/docs/test-configuration */
 export default defineConfig({
   captureGitInfo: { commit: true, diff: true },
   testDir: './src/tests',
@@ -47,6 +40,7 @@ export default defineConfig({
   /* Reporter to use. See https://playwright.dev/docs/test-reporters */
   /* Allure-Report configuration, see: https://allurereport.org/docs/playwright-configuration  */
 
+  // reporter: 'dot',
   reporter: [
     ['line'],
     ['html', { open: 'on-failure', outputFolder: 'src/output/test-reports' }],
@@ -75,13 +69,12 @@ export default defineConfig({
     ],
   ],
 
-  // reporter: 'dot',
   /* Shared settings for all the projects below. See https://playwright.dev/docs/api/class-testoptions. */
   use: {
     /* Set test ID attribute for project*/
     testIdAttribute: 'data-test',
     /* Base URL to use in actions like `await page.goto('/')`. */
-    baseURL: Configuration.baseURL ?? 'https://www.saucedemo.com',
+    baseURL: Configuration.baseUrl ?? 'https://www.saucedemo.com',
 
     /* Collect trace when retrying the failed test. See https://playwright.dev/docs/trace-viewer */
     actionTimeout: 0,
diff --git a/src/config/configuration.ts b/src/config/configuration.ts
index 10e5ab1..1ba9c25 100644
--- a/src/config/configuration.ts
+++ b/src/config/configuration.ts
@@ -3,7 +3,7 @@ import * as dotenv from 'dotenv';
 dotenv.config({ override: true });
 
 export class Configuration {
-  public static get baseURL(): string {
+  public static get baseUrl(): string {
     return process.env.BASE_URL ?? '[NOT SET]';
   }
   public static get user(): string {
diff --git a/src/config/global-setup.ts b/src/config/global-setup.ts
index 89cfbd2..44f4700 100644
--- a/src/config/global-setup.ts
+++ b/src/config/global-setup.ts
@@ -1,7 +1,19 @@
+import * as dotenv from 'dotenv';
+import * as path from 'path';
+
 async function globalSetup(): Promise<void> {
-  // console.log('üåç  URL: ', Configuration.baseURL);
-  // console.log('üïµÔ∏è‚Äç‚ôÇÔ∏è  User: ', Configuration.user);
-  // console.log('üîê  Password: ', Configuration.password);
+  enum environments {
+    local = 'local',
+    prod = 'prod',
+  }
+
+  const environment = process.env['ENV'] ?? environments.prod;
+  dotenv.config({ path: path.resolve(`.env.${environment}`) });
+
+  // eslint-disable-next-line no-console
+  console.log('üåç Environment: ', environment);
+  // console.log('üïµÔ∏è‚Äç‚ôÇÔ∏è User: ', Configuration.user);
+  // console.log('üîê Password: ', Configuration.password);
 }
 
 export default globalSetup;
diff --git a/tsconfig.json b/tsconfig.json
index 5e004f5..d1919be 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -7,7 +7,7 @@
     "sourceMap": true,
     "target": "ESNext",
     "module": "CommonJS",
-    "baseUrl": ".",
+    "baseUrl": "./",
     "paths": { "@_src/*": ["src/*"] }
   },
   "exclude": ["node_modules", "e2e/output/**"]
```
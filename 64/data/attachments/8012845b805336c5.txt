# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Pages with errors >> Visual effect for inventory
- Location: /home/runner/work/sauce-demo-let-s-test-it/sauce-demo-let-s-test-it/src/tests/ui/ui.spec.ts:52:7

# Error details

```
Error: expect(page).toHaveScreenshot(expected)

  could not decode image as PNG.

Expected: /home/runner/work/sauce-demo-let-s-test-it/sauce-demo-let-s-test-it/src/assets/images/ui/inventory.png

Call log:
  - expect.toHaveScreenshot(inventory.png) with timeout 5000ms
    - verifying given screenshot expectation
  - taking page screenshot
    - disabled all CSS animations
  - waiting for fonts to load...
  - fonts loaded
  - could not decode image as PNG.

    at BasePage.expectHaveScreenshot (/home/runner/work/sauce-demo-let-s-test-it/sauce-demo-let-s-test-it/src/pages/e2e/base.page.ts:73:29)
    at /home/runner/work/sauce-demo-let-s-test-it/sauce-demo-let-s-test-it/src/tests/ui/ui.spec.ts:62:16
```

# Test source

```ts
   1 | import { HeaderComponent } from '@_src/components/header.component';
   2 | import { SideBarComponent } from '@_src/components/sidebar.component';
   3 | import { ScreenshotPath } from '@_src/utils/paths.util';
   4 | import { type Locator, type Page, expect } from '@playwright/test';
   5 |
   6 | export class BasePage {
   7 |   protected readonly page: Page;
   8 |   readonly header: HeaderComponent;
   9 |   readonly sidebar: SideBarComponent;
  10 |
  11 |   readonly headerTitle: Locator;
  12 |   readonly error: Locator;
  13 |
  14 |   constructor(page: Page) {
  15 |     this.page = page;
  16 |     this.header = new HeaderComponent(this.page);
  17 |     this.sidebar = new SideBarComponent(this.page);
  18 |
  19 |     this.headerTitle = page.getByTestId('title');
  20 |     this.error = page.getByTestId('error');
  21 |   }
  22 |
  23 |   async goTo(url: string = '/'): Promise<void> {
  24 |     await this.page.goto(url);
  25 |   }
  26 |
  27 |   async toHaveUrl(url: string | RegExp): Promise<void> {
  28 |     await expect(this.page).toHaveURL(url);
  29 |   }
  30 |
  31 |   async catchError(error: string): Promise<void> {
  32 |     await expect(this.error).toContainText(error);
  33 |   }
  34 |
  35 |   //* Sidebar
  36 |   async resetApp(): Promise<void> {
  37 |     await this.header.clickSideBarMenu();
  38 |     await this.sidebar.clickLinkResetAppState();
  39 |     await this.sidebar.clickButtonCrossMenu();
  40 |   }
  41 |
  42 |   async logoutFromApp(): Promise<void> {
  43 |     await this.header.clickSideBarMenu();
  44 |     await this.sidebar.clickLinkLogout();
  45 |   }
  46 |
  47 |   async closePage(): Promise<void> {
  48 |     await this.page.close();
  49 |   }
  50 |
  51 |   //* Scrolls
  52 |   async scrollDown(): Promise<void> {
  53 |     await this.page.evaluate(() => {
  54 |       window.scrollTo(0, document.body.scrollHeight);
  55 |     });
  56 |   }
  57 |
  58 |   async scrollUp(): Promise<void> {
  59 |     await this.page.evaluate(() => {
  60 |       window.scrollTo(0, 0);
  61 |     });
  62 |   }
  63 |
  64 |   //* Screenshot
  65 |   async takeScreenshot(screenshot: string): Promise<void> {
  66 |     await this.page.screenshot({
  67 |       path: `${ScreenshotPath}${screenshot}.png`,
  68 |       fullPage: true,
  69 |     });
  70 |   }
  71 |
  72 |   async expectHaveScreenshot(screenshot: string): Promise<void> {
> 73 |     await expect(this.page).toHaveScreenshot(`${screenshot}.png`, { fullPage: true });
     |                             ^ Error: expect(page).toHaveScreenshot(expected)
  74 |   }
  75 | }
  76 |
```

# Local changes

```diff
diff --git a/package-lock.json b/package-lock.json
index a74be5c..4c5d129 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -15,7 +15,7 @@
         "@axe-core/playwright": "^4.10.1",
         "@eslint/js": "^9.14.0",
         "@faker-js/faker": "^8.4.1",
-        "@playwright/test": "^1.49.0",
+        "@playwright/test": "^1.51.0",
         "@trivago/prettier-plugin-sort-imports": "^4.3.0",
         "@types/node": "^20.17.6",
         "allure-commandline": "^2.32.0",
@@ -650,12 +650,12 @@
       }
     },
     "node_modules/@playwright/test": {
-      "version": "1.49.0",
-      "resolved": "https://registry.npmjs.org/@playwright/test/-/test-1.49.0.tgz",
-      "integrity": "sha512-DMulbwQURa8rNIQrf94+jPJQ4FmOVdpE5ZppRNvWVjvhC+6sOeo28r8MgIpQRYouXRtt/FCCXU7zn20jnHR4Qw==",
+      "version": "1.51.0",
+      "resolved": "https://registry.npmjs.org/@playwright/test/-/test-1.51.0.tgz",
+      "integrity": "sha512-dJ0dMbZeHhI+wb77+ljx/FeC8VBP6j/rj9OAojO08JI80wTZy6vRk9KvHKiDCUh4iMpEiseMgqRBIeW+eKX6RA==",
       "dev": true,
       "dependencies": {
-        "playwright": "1.49.0"
+        "playwright": "1.51.0"
       },
       "bin": {
         "playwright": "cli.js"
@@ -4936,12 +4936,12 @@
       }
     },
     "node_modules/playwright": {
-      "version": "1.49.0",
-      "resolved": "https://registry.npmjs.org/playwright/-/playwright-1.49.0.tgz",
-      "integrity": "sha512-eKpmys0UFDnfNb3vfsf8Vx2LEOtflgRebl0Im2eQQnYMA4Aqd+Zw8bEOB+7ZKvN76901mRnqdsiOGKxzVTbi7A==",
+      "version": "1.51.0",
+      "resolved": "https://registry.npmjs.org/playwright/-/playwright-1.51.0.tgz",
+      "integrity": "sha512-442pTfGM0xxfCYxuBa/Pu6B2OqxqqaYq39JS8QDMGThUvIOCd6s0ANDog3uwA0cHavVlnTQzGCN7Id2YekDSXA==",
       "dev": true,
       "dependencies": {
-        "playwright-core": "1.49.0"
+        "playwright-core": "1.51.0"
       },
       "bin": {
         "playwright": "cli.js"
@@ -4954,9 +4954,9 @@
       }
     },
     "node_modules/playwright-core": {
-      "version": "1.49.0",
-      "resolved": "https://registry.npmjs.org/playwright-core/-/playwright-core-1.49.0.tgz",
-      "integrity": "sha512-R+3KKTQF3npy5GTiKH/T+kdhoJfJojjHESR1YEWhYuEKRVfVaxH3+4+GvXE5xyCngCxhxnykk0Vlah9v8fs3jA==",
+      "version": "1.51.0",
+      "resolved": "https://registry.npmjs.org/playwright-core/-/playwright-core-1.51.0.tgz",
+      "integrity": "sha512-x47yPE3Zwhlil7wlNU/iktF7t2r/URR3VLbH6EknJd/04Qc/PSJ0EY3CMXipmglLG+zyRxW6HNo2EGbKLHPWMg==",
       "dev": true,
       "bin": {
         "playwright-core": "cli.js"
diff --git a/package.json b/package.json
index 4efd518..53ab8d5 100644
--- a/package.json
+++ b/package.json
@@ -26,7 +26,7 @@
     "@axe-core/playwright": "^4.10.1",
     "@eslint/js": "^9.14.0",
     "@faker-js/faker": "^8.4.1",
-    "@playwright/test": "^1.49.0",
+    "@playwright/test": "^1.51.0",
     "@trivago/prettier-plugin-sort-imports": "^4.3.0",
     "@types/node": "^20.17.6",
     "allure-commandline": "^2.32.0",
diff --git a/playwright.config.ts b/playwright.config.ts
index 8c76c4e..a864ccf 100644
--- a/playwright.config.ts
+++ b/playwright.config.ts
@@ -11,6 +11,7 @@ dotenv.config({ path: path.resolve(__dirname, `.env`) });
  * See https://playwright.dev/docs/test-configuration.
  */
 export default defineConfig({
+  captureGitInfo: { commit: true, diff: true },
   testDir: './src/tests',
   outputDir: './src/output/test-results',
   // snapshotPathTemplate: '{testDir}/ui/{arg}{ext}',
```